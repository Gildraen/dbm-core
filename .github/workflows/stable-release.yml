name: Manual Stable Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      current_version: ${{ steps.version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate new version
        id: version
        run: |
          LATEST_RELEASE=$(gh release list --limit 1 --exclude-pre-releases --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
          if [ -z "$LATEST_RELEASE" ]; then
            CURRENT_VERSION=$(node -p "require('./package.json').version")
          else
            CURRENT_VERSION=${LATEST_RELEASE#v}
          fi

          if [ "${{ inputs.version_type }}" = "patch" ]; then
            NEW_VERSION=$(node -p "const v = '$CURRENT_VERSION'.split('.'); v[2] = +v[2] + 1; v.join('.') ")
          elif [ "${{ inputs.version_type }}" = "minor" ]; then
            NEW_VERSION=$(node -p "const v = '$CURRENT_VERSION'.split('.'); v[1] = +v[1] + 1; v[2] = 0; v.join('.') ")
          elif [ "${{ inputs.version_type }}" = "major" ]; then
            NEW_VERSION=$(node -p "const v = '$CURRENT_VERSION'.split('.'); v[0] = +v[0] + 1; v[1] = 0; v[2] = 0; v.join('.') ")
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: calculate-version
    uses: ./.github/workflows/reusable-release.yml
    permissions:
      contents: write
      packages: write
    with:
      version: ${{ needs.calculate-version.outputs.new_version }}
      is_prerelease: false
    secrets: inherit
